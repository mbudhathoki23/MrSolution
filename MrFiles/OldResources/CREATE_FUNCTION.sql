

IF OBJECT_ID('AMS.Fn_Select_ClassCode') IS NULL 
BEGIN EXECUTE('CREATE FUNCTION AMS.Fn_Select_ClassCode (@Class_Code1 varchar(50),@Class_Code2 varchar(50))returns varchar(50)as begin DECLARE @Class_Code3 varchar(50) SET @Class_Code3 = '''' declare @Value varchar(50)  declare @Value1 varchar(50) Declare c0 Cursor For  SELECT Value FROM fn_Split(@Class_Code2, '','')    Open c0     Fetch Next From c0 Into @Value    while @@FETCH_STATUS = 0 Begin Declare c1 Cursor For SELECT Value FROM fn_Split(@Class_Code1, '','')  Open c1 Fetch Next From c1 Into @Value1 while @@FETCH_STATUS = 0 Begin IF @Value1 = @Value BEGIN SET @Class_Code3 = @Class_Code3 + @Value1 + '','' END Fetch Next From c1 Into @Value1 end CLOSE c1 DEALLOCATE c1 Fetch Next From c0 Into @Value   end CLOSE c0 DEALLOCATE c0 set @Class_Code3 = (SELECT SUBSTRING(@Class_Code3, 0, LEN(@Class_Code3)))	return @Class_Code3 end;')end;

IF OBJECT_ID('AMS.fn_Split') IS NULL 
BEGIN EXECUTE('CREATE FUNCTION AMS.fn_Split (@text varchar(8000), @delimiter varchar(20) = '' '') RETURNS @Strings TABLE(position int IDENTITY PRIMARY KEY, value varchar(8000)  ) AS BEGIN DECLARE @index int SET @index = -1 WHILE(LEN(@text) > 0)   BEGIN SET @index = CHARINDEX(@delimiter , @text) IF(@index = 0) AND(LEN(@text) > 0) BEGIN INSERT INTO @Strings VALUES(@text)           BREAK END  IF(@index > 1)       BEGIN INSERT INTO @Strings VALUES(LEFT(@text, @index - 1))          SET @text = RIGHT(@text, (LEN(@text) - @index))       END ELSE       SET @text = RIGHT(@text, (LEN(@text) - @index))    END RETURN END;')END;

IF OBJECT_ID('AMS.fn_Splitstring') IS NULL 
BEGIN EXECUTE('CREATE FUNCTION AMS.fn_Splitstring (@RowData nvarchar(2000),@SplitOn nvarchar(5)) RETURNS @ReturnTable table(Id int, Value Varchar(1024))             AS Begin                 Declare @i int Set @i = 0 While @RowData<> ''''  Begin Set @i = @i + 1 if CharIndex(@SplitOn, @RowData) > 0  Begin Insert into @ReturnTable(ID, Value) Values(@i, substring(@RowData, 1, CharIndex(@SplitOn, @RowData) - 1)) Set @RowData = substring(@RowData, CharIndex(@SplitOn, @RowData) + 1, len(@RowData))  End Else  Begin Insert into @ReturnTable(ID, Value) Values(@i, @RowData) Set @RowData = ''''  End End  Return END;')END;

IF OBJECT_ID('AMS.Retrun_Numeric') IS NULL 
BEGIN EXECUTE('CREATE FUNCTION AMS.Retrun_Numeric (@strAlphaNumeric VARCHAR(256)) RETURNS VARCHAR(256) AS BEGIN DECLARE @intAlpha INT SET @intAlpha = PATINDEX(''%^0-9%'', @strAlphaNumeric) BEGIN WHILE @intAlpha > 0 BEGIN SET @strAlphaNumeric = STUFF(@strAlphaNumeric, @intAlpha, 1, '''') SET @intAlpha = PATINDEX(''%^0-9%'', @strAlphaNumeric) END END RETURN ISNULL(@strAlphaNumeric,0) END;')END;

IF OBJECT_ID('AMS.Return_NepaliDate') IS NULL 
BEGIN EXECUTE('CREATE FUNCTION AMS.Return_NepaliDate (@Date nvarchar(20) ) returns nvarchar(20) as begin set @Date = replace(@Date, ''-'', ''/'')  declare @AD_Date nvarchar(32)   declare @Return nvarchar(20)    declare @Day int declare @Month int declare @Year int set @Month = (select top(1) * from AMS.split(@Date, ''/'', 1)) 	if (@Month < 13) begin set @Day = (select top(1) * from AMS.split(@Date, ''/'', 2)) 		set @Year = (select top(1) * from AMS.Split(@Date, ''/'', 3)) 	end     else begin set @Year = (select top(1) * from AMS.split(@Date, ''/'', 1)) 		set @Month = (select top(1) * from AMS.split(@Date, ''/'', 2)) 		set @Day = (select top(1) * from AMS.split(@Date, ''/'', 3)) 	end set @AD_Date = cast(cast(@Month as int) as varchar(20)) + ''/'' + cast(cast(@Day as int) as varchar(20)) + ''/'' + cast(cast(@Year as int) as varchar(20))  set @Return = (select BS_DateDMY from AMS.DateMiti where AD_Date = @AD_Date) return @Return end;')END;

IF OBJECT_ID('AMS.Split') IS NULL 
BEGIN EXECUTE('CREATE FUNCTION AMS.Split (@DataStr varchar(8000), @Delimiter char(1), @Count int) returns @TemporaryTable TABLE(Items varchar(8000)) as begin declare @Index int declare @Slice varchar(8000) declare @I int set @I = 1  select @Index = 1   if len(@DataStr) < 1 or @DataStr is null  return     while @Index != 0             begin set @Index = charindex(@Delimiter, @DataStr)                 if @Index != 0                     set @Slice = left(@DataStr, @Index - 1)  else set @Slice = @DataStr if (len(@Slice) > 0) begin if (@Count = @I) begin insert into @TemporaryTable(Items) values(@Slice)             end end      set @I = @I + 1        set @DataStr = right(@DataStr, len(@DataStr) - @Index) if len(@DataStr) = 0 break  end  return end;')END;

IF OBJECT_ID('AMS.StrDate') IS NULL 
BEGIN EXECUTE('CREATE FUNCTION AMS.StrDate (@Date1 as datetime) returns varchar(10) as begin DECLARE @strymd as varchar(10)     set @strymd = cast(year(@date1) as varchar(4)) + ''-'' + right(''0'' + cast(month(@date1) as varchar), 2) + ''-'' + right(''0'' + cast(day(@date1) as varchar), 2)     return (@strymd)End;')END;

IF OBJECT_ID('dbo.Return_Password') IS NULL 
BEGIN EXECUTE('CREATE FUNCTION dbo.Return_Password (@txt varchar(50)  )returns Varchar(100) as begin declare @i int declare @txt1 varchar(100) declare @txt2 varchar(100) set @i = 1 set @txt2 = '''' while @i <= LEN(@txt) begin set @txt1 = char(249 - ASCII(substring(@txt, @i, 1)))set @i = @i + 1 set @txt2 = @txt2 + @txt1 end return @txt2 end;')END;

IF OBJECT_ID('AMS.AccountDetails') IS NULL 
BEGIN EXECUTE('CREATE TABLE AMS.AccountDetails ( Module char(10) NOT NULL, Serial_No int NOT NULL, Voucher_No nvarchar(50) NOT NULL, Ledger_ID bigint NOT NULL, Voucher_Date datetime NOT NULL,  Voucher_Miti nvarchar(50) NOT NULL, Voucher_Time datetime NOT NULL, CbLedger_ID bigint NULL, Subleder_ID int NULL, Agent_ID int NULL, Department_ID1 int NULL, Department_ID2 int NULL, Department_ID3 int NULL, Department_ID4 int NULL, Currency_ID int NOT NULL, Currency_Rate decimal(18, 6) NOT NULL, Debit_Amt decimal(18, 6) NOT NULL, Credit_Amt decimal(18, 6) NOT NULL, LocalDebit_Amt decimal(18, 6) NOT NULL,  LocalCredit_Amt decimal(18, 6) NOT NULL, DueDate datetime NULL, DueDays int NULL, Narration nvarchar(1024) NULL, Remarks nvarchar(1024) NULL, RefNo nvarchar(50) NULL, RefDate nvarchar(50) NULL, Reconcile_By nvarchar(50) NULL, Reconcile_Date datetime NULL, Authorize_By varchar(50) NULL, Authorize_Date datetime NULL,Clearing_By nvarchar(50) NULL, Clearing_Date datetime NULL, Posted_By varchar(50) NULL,Posted_Date datetime NULL, Cheque_No nvarchar(50) NULL, Cheque_Date datetime NULL, Cheque_Miti nvarchar(50) NULL, PartyName nvarchar(100) NULL, PartyLedger_Id int NULL, Party_PanNo nvarchar(50) NULL, CmpUnit_ID int NULL, FiscalYearId int NOT NULL, DoctorId int NULL, PatientId bigint NULL, HDepartmentId int NULL,Branch_ID int NOT NULL,     EnterBy nvarchar(50) NOT NULL,  EnterDate datetime NOT NULL ) ON [PRIMARY];;')END;




