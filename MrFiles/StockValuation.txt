WITH UnitsCTE
AS
(
-- GET Total Units Left

Select PName,SuM(Case when EntryType='I' then Qty else -Qty end) Units from AMS.StockDetails as SD 
left outer Join AMS.Product as P on P.PID=SD.Product_Id
Group By PName
), PurchaseCTE
AS
(
-- Get only purchases in reverse order
    SELECT PName,Qty, Rate, Voucher_Date, ROW_NUMBER() OVER (ORDER BY Voucher_Date DESC ) AS RN
    FROM AMS.StockDetails,AMS.Product
    WHERE EntryType <> 'O' and PID=Product_Id
),
UnitCost
AS
(
-- Recursive CTE to get number of units left at each price
    SELECT UnitsCTE.PName,CASE WHEN Qty > UnitsCTE.Units THEN UnitsCTE.Units ELSE Qty END As Units, Rate
    FROM PurchaseCTE 
	
    CROSS APPLY UnitsCTE
    WHERE RN = 1

    UNION ALL
    SELECT UnitsCTE.PName,CASE WHEN P1.Qty > (UnitsCTE.Units - (SELECT SUM(Qty) FROM PurchaseCTE P3 WHERE p3.RN < p1.RN))
            THEN    CASE WHEN (UnitsCTE.Units - (SELECT SUM(Qty) FROM PurchaseCTE P3 WHERE p3.RN < p1.RN)) < 0 THEN 0
                        ELSE (UnitsCTE.Units - (SELECT SUM(Qty) FROM PurchaseCTE P3 WHERE p3.RN < p1.RN)) END
            ELSE P1.Qty END,
            P1.Rate 
    FROM PurchaseCTE P1
    INNER JOIN PurchaseCTE P2
        ON P1.RN = P2.RN + 1
    CROSS APPLY UnitsCTE
	--Group By UnitsCTE.PName
)
SELECT SUM(Units), SUM(Rate * Units) / SUM(Units) AS UnitCost, SUM(Units * Rate) AS TotalCost
FROM UnitCost
WHERE Units > 0